#!/usr/bin/python
import urllib, json, sys 
import argparse
parser = argparse.ArgumentParser(description='Nagios plugin to monitor hashrate on Bitcoin mining pools')
parser.add_argument('-p', dest='pool', help='Bitcoin mining pool, currently supported coinotron & bitcoin.cz', required=True)
parser.add_argument('-a', dest='api_key', help='API key for your Bitcoin mining account', required=True)
parser.add_argument('-w', dest='warning', help='Warning threshold', required=True)
parser.add_argument('-c', dest='critical', help='Critical threshold', required=True)
args = parser.parse_args()

warning = float(args.warning)
critical = float(args.critical)


def get_hashrate(pool, api_key):
  if pool ==  'bitcoin.cz':
    url = 'https://mining.bitcoin.cz/accounts/profile/json/'+api_key
    result = urllib.urlopen(url)
    data = json.load(result)
    #print json.dumps(data)
    return float(data["hashrate"])
  elif pool ==  'coinotron':
    url = 'https://www.coinotron.com/coinotron/AccountServlet?action=api&api_key='+api_key
    result = urllib.urlopen(url)
    data = json.load(result)
    hashrate=0.0
    for i in data["workers"]:
      hashrate =+ float(data["workers"][i]["hashrate"])
    return hashrate
  else: 
    print "UKNOWN - %s unknown pool." % pool 
    sys.exit(3)


current_hashrate = get_hashrate(args.pool, args.api_key)
if isinstance(current_hashrate, float) == False:
        print "UKNOWN - %s MHs hashrate." % current_hashrate
        sys.exit(3)
elif current_hashrate > warning:
        print "OK - %s MHs hashrate." % current_hashrate
        sys.exit(0)
elif current_hashrate >= critical:
        print "WARNING - %s MHs hashrate." % current_hashrate
        sys.exit(1)
elif current_hashrate < critical:
        print "CRITICAL - %s MHs hashrate." % current_hashrate
        sys.exit(2)
else:
        print "UKNOWN - %s MHs hashrate." % current_hashrate
        sys.exit(3)
